generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  email         String       @unique
  emailVerified DateTime?
  password      String
  image         String?
  creditCards   CreditCard[]
  isAdmin       Boolean @default(false)

  // Relations
  reviews       Review[]      @relation("UserReviews")
  ratings       Rating[]      @relation("UserRatings")
  shoppingCart  ShoppingCart?

  @@index([username])
}

model Book {
  id          String     @id @default(cuid())
  isbn        String
  title       String
  author      String
  publisher   String?
  genre       String
  price       Float
  publishedAt DateTime? @default(now())
  tags        String[]
  description String?
  copies      Int?
  ratings     Rating[]   @relation("BookRatings")
  reviews     Review[]   @relation("BookReviews")
  cartItems   CartItem[]

  @@index([title, author])
}

model Review {
  id         String   @id @default(cuid())
  bookId     String
  userId     String
  content    String
  reviewDate DateTime
  book       Book     @relation("BookReviews", fields: [bookId], references: [id], onDelete: Cascade)
  user       User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId])
}

model Rating {
  id         String   @id @default(cuid())
  bookId     String
  userId     String
  score      Float
  ratingDate DateTime
  book       Book     @relation("BookRatings", fields: [bookId], references: [id], onDelete: Cascade)
  user       User     @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId])
}

model ShoppingCart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("shopping_carts")
}

model CartItem {
  id       String       @id @default(cuid())
  cartId   String
  bookId   String
  quantity Int          @default(1)
  addedAt  DateTime     @default(now())
  book     Book         @relation(fields: [bookId], references: [id])
  cart     ShoppingCart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, bookId])
  @@map("cart_items")
}

model CreditCard {
  id             String   @id @default(uuid())
  userId         String
  cardNumber     String   @db.VarChar(16)
  cardHolderName String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}
