generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  email         String?       @unique
  emailVerified DateTime?
  password      String
  image         String?

  // Relations
  reviews       Review[]      @relation("UserReviews")
  ratings       Rating[]      @relation("UserRatings")
  shoppingCart  ShoppingCart?
  creditCards    CreditCard[] // Relation to CreditCard


  // Indexes
  @@index([username])
}

model Book {
  id          String     @id @default(cuid())
  title       String
  author      String
  genre       String
  price       Float
  publishedAt DateTime
  tags        String[]

  // Relations
  reviews     Review[]   @relation("BookReviews")
  ratings     Rating[]   @relation("BookRatings")
  cartItems   CartItem[]

  // Indexes
  @@index([title, author])
}

model Review {
  id          String   @id @default(cuid())
  bookId      String
  userId      String
  content     String
  score       Float
  reviewDate  DateTime

  // Relations
  book        Book     @relation("BookReviews", fields: [bookId], references: [id], onDelete: Cascade)
  user        User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId])
}

model Rating {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  score     Float

  // Relations
  book      Book     @relation("BookRatings", fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId])
}

model ShoppingCart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("shopping_carts")
}

model CartItem {
  id          String        @id @default(cuid())
  cartId      String
  bookId      String
  quantity    Int           @default(1)
  addedAt     DateTime      @default(now())

  // Relations
  cart        ShoppingCart  @relation(fields: [cartId], references: [id], onDelete: Cascade)
  book        Book          @relation(fields: [bookId], references: [id])

  @@unique([cartId, bookId])
  @@map("cart_items")
}

model CreditCard {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  cardNumber     String   @db.VarChar(16) // For fake data, storing full number is acceptable
  cardHolderName String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}