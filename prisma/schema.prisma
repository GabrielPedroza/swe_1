generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ratings       Rating[]
    reviews       Review[]
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String    // Instead of normalizing the author in a separate table, we store the name directly.
  genre       String
  price       Float
  copiesSold  Int
  publishedAt DateTime
  reviews     Review[]  // Embedding reviews directly within the book (denormalized)
  tags        String[]  // Using an array to store tags like "fiction", "bestseller", etc.
  ratings     Rating[]
}
 
model Review {
  id        Int      @id @default(autoincrement())
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewer  User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  content   String
  rating    Float
  reviewDate DateTime
}
 
model Rating {
  id      Int   @id @default(autoincrement())
  bookId  Int
  book    Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score   Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
